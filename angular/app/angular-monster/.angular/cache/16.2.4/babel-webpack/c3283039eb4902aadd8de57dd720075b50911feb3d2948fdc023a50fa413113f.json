{"ast":null,"code":"import { catchError, tap, throwError } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class MonsterService {\n  constructor(http) {\n    this.http = http;\n    this.monstersUrl = 'api/monsters/monsters.json';\n  }\n  getMonsters() {\n    return this.http.get(this.monstersUrl).pipe(tap(data => console.log('All: ', JSON.stringify(data))), catchError(this.handleError));\n  }\n  handleError(err) {\n    let errorMessage = '';\n    if (err.error instanceof ErrorEvent) {\n      errorMessage = `An error occurred: ${err.error.message}`;\n    } else {\n      errorMessage = `Server returned code: ${err.status}, error message is: ${err.message}`;\n    }\n    console.error(errorMessage);\n    return throwError(() => errorMessage);\n  }\n  static #_ = this.ɵfac = function MonsterService_Factory(t) {\n    return new (t || MonsterService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: MonsterService,\n    factory: MonsterService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["catchError","tap","throwError","MonsterService","constructor","http","monstersUrl","getMonsters","get","pipe","data","console","log","JSON","stringify","handleError","err","errorMessage","error","ErrorEvent","message","status","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["D:\\dev\\angular-monster\\angular-monster\\src\\app\\monsters\\monster.service.ts"],"sourcesContent":["import { Injectable } from \"@angular/core\";\r\nimport { IMonster } from \"./monster\";\r\nimport { HttpClient, HttpErrorResponse } from \"@angular/common/http\";\r\nimport { Observable, catchError, tap, throwError } from \"rxjs\";\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class MonsterService{\r\n    private monstersUrl = 'api/monsters/monsters.json';\r\n\r\n    constructor(private http: HttpClient){}\r\n\r\n    getMonsters(): Observable<IMonster[]>{\r\n        return this.http.get<IMonster[]>(this.monstersUrl).pipe(\r\n            tap(data => console.log('All: ', JSON.stringify(data))),\r\n            catchError(this.handleError)\r\n        );\r\n    }\r\n\r\n    private handleError(err: HttpErrorResponse){\r\n        let errorMessage ='';\r\n        if(err.error instanceof ErrorEvent){\r\n            errorMessage = `An error occurred: ${err.error.message}`;\r\n        } else {\r\n            errorMessage = `Server returned code: ${err.status}, error message is: ${err.message}`;\r\n        }\r\n        console.error(errorMessage);\r\n        return throwError(()=>errorMessage);\r\n    }\r\n}"],"mappings":"AAGA,SAAqBA,UAAU,EAAEC,GAAG,EAAEC,UAAU,QAAQ,MAAM;;;AAK9D,OAAM,MAAOC,cAAc;EAGvBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFhB,KAAAC,WAAW,GAAG,4BAA4B;EAEZ;EAEtCC,WAAWA,CAAA;IACP,OAAO,IAAI,CAACF,IAAI,CAACG,GAAG,CAAa,IAAI,CAACF,WAAW,CAAC,CAACG,IAAI,CACnDR,GAAG,CAACS,IAAI,IAAIC,OAAO,CAACC,GAAG,CAAC,OAAO,EAAEC,IAAI,CAACC,SAAS,CAACJ,IAAI,CAAC,CAAC,CAAC,EACvDV,UAAU,CAAC,IAAI,CAACe,WAAW,CAAC,CAC/B;EACL;EAEQA,WAAWA,CAACC,GAAsB;IACtC,IAAIC,YAAY,GAAE,EAAE;IACpB,IAAGD,GAAG,CAACE,KAAK,YAAYC,UAAU,EAAC;MAC/BF,YAAY,GAAG,sBAAsBD,GAAG,CAACE,KAAK,CAACE,OAAO,EAAE;KAC3D,MAAM;MACHH,YAAY,GAAG,yBAAyBD,GAAG,CAACK,MAAM,uBAAuBL,GAAG,CAACI,OAAO,EAAE;;IAE1FT,OAAO,CAACO,KAAK,CAACD,YAAY,CAAC;IAC3B,OAAOf,UAAU,CAAC,MAAIe,YAAY,CAAC;EACvC;EAAC,QAAAK,CAAA,G;qBArBQnB,cAAc,EAAAoB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAdxB,cAAc;IAAAyB,OAAA,EAAdzB,cAAc,CAAA0B,IAAA;IAAAC,UAAA,EAFX;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}